import{_ as e,c as t,o as p,ag as n}from"./chunks/framework.ELrfyV9R.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{"theme":"vuepress","highlight":"tomorrow-night"},"headers":[],"relativePath":"article/code/2023-04-03-文冠.md","filePath":"article/code/2023-04-03-文冠.md","lastUpdated":1758237884000}'),s={name:"article/code/2023-04-03-文冠.md"};function o(i,a,r,l,c,u){return p(),t("div",null,a[0]||(a[0]=[n(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d511e9748ea3480d83194398832ab88e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>我现在的模式便是有问题就会先问问ChatGPT，甭管它给予我的答案是正确的、错误的、模棱两可的，都可以给予我一定的参考。 下面我主要来尝试一下，如何通过代码来实现微调呢？ <a href="https://platform.openai.com/docs/guides/fine-tuning" target="_blank" rel="noreferrer">Fine-tuning - OpenAI API</a> 这个链接算是官网的指导，其实我就是看着官网的指导进行的</p><h2 id="准备环境" tabindex="-1">准备环境 <a class="header-anchor" href="#准备环境" aria-label="Permalink to &quot;准备环境&quot;">​</a></h2><p>可以先找到一个指定的文件夹，这里前提是要先安装 <code>python</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1539349ca350429c85f9c108c57b0d21~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>如果执行没有看到版本信息要先去安装下载了，然后顺序执行以下指令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 安装依赖</span></span>
<span class="line"><span>pip install --upgrade openai</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 设置 OPENAI_API_KEY</span></span>
<span class="line"><span>export OPENAI_API_KEY=&quot;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&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 设置openai 代理</span></span>
<span class="line"><span>export OPENAI_API_BASE=&quot;https://service-r7s1v88u-1253646855.usw.apigw.tencentcs.com/v1&quot;</span></span></code></pre></div><h2 id="准备数据" tabindex="-1">准备数据 <a class="header-anchor" href="#准备数据" aria-label="Permalink to &quot;准备数据&quot;">​</a></h2><p>数据文件为<code>test.jsonl</code>,这里的数据我也不准备多了，对我来说只是实践一下如何来微调数据产生自己的模型而已。 下面是我随便准备了两条json数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{&quot;prompt&quot;: &quot;请使用golang写一个冒泡排序的算法&quot;, &quot;completion&quot;: &quot;这个算法不需要生成了，本地已经存在，请换其他问题&quot;}</span></span>
<span class="line"><span>{&quot;prompt&quot;: &quot;请告诉我XX公司发展的怎么样了&quot;, &quot;completion&quot;: &quot;融资款已到，XX项目的首付剩余款也在路上，已步入正轨&quot;}</span></span></code></pre></div><h2 id="重新格式化数据" tabindex="-1">重新格式化数据 <a class="header-anchor" href="#重新格式化数据" aria-label="Permalink to &quot;重新格式化数据&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openai tools fine_tunes.prepare_data -f test.jsonl</span></span></code></pre></div><p>执行后会提供给我们一系列的建议，最后输出一个它建议的数据格式</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99a81f531cb14e5f82ff8d4d0b9bf694~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="创建微调模型" tabindex="-1">创建微调模型 <a class="header-anchor" href="#创建微调模型" aria-label="Permalink to &quot;创建微调模型&quot;">​</a></h2><p>根据上面的数据进行创建微调模型，基础模型为 <code>davinci</code>，你也可以根据需要选择其他的模型。如果数据量很大，价格差距还是蛮大的</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2d22d0511074ba381558d41d2fd26bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openai api fine_tunes.create -t &quot;test_prepared.jsonl&quot; -m &quot;davinci&quot;</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17ba417a5d1f4ed0a1320a8f076906a3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b60d612ab7246c0a6da679b8e1ad885~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>看上图发现原来是stream流应该是不支持的， 这个是腾讯云的问题，于是我换成了使用<code>cloudflare</code> <a href="https://dash.cloudflare.com" target="_blank" rel="noreferrer">https://dash.cloudflare.com</a> 搭建的代理</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/002f28a7fd2b49b583b00fd95629af3f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>然后再次运行立马成功了</p><h2 id="微调模型的调用" tabindex="-1">微调模型的调用 <a class="header-anchor" href="#微调模型的调用" aria-label="Permalink to &quot;微调模型的调用&quot;">​</a></h2><ul><li><p>第一种直接使用命令调用 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3437a083d4c84e98baecdbe7bb29b8b7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>第二种使用接口调用</p></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49de9a1e0db643aa8878b0e4264fd006~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="后续" tabindex="-1">后续 <a class="header-anchor" href="#后续" aria-label="Permalink to &quot;后续&quot;">​</a></h2><p>通过官网 <a href="https://platform.openai.com/docs/guides/fine-tuning%E5%90%8E%E9%9D%A2%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E5%8F%91%E7%8E%B0%E4%BB%A5%E4%B8%8B%E5%8A%9F%E8%83%BD%EF%BC%9A" target="_blank" rel="noreferrer">https://platform.openai.com/docs/guides/fine-tuning后面可以继续发现以下功能：</a></p><ul><li>可以删除微调的模型</li><li>可以对微调的模型继续微调</li><li>可以对微调模型名称进行自定义</li><li>等等还有其他许多的细节知识有兴趣的可以去看原版</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><a href="https://www.zhihu.com/question/591066880/answer/2961747033" target="_blank" rel="noreferrer">如何使用OpenAI fine-tuning(微调)训练属于自己的专有模型？ - 知乎 (zhihu.com)</a> 这是知乎上一个大牛自己实测数据有兴趣的可以看一下。其实花费70、80美元还是蛮大的而且只是1000条数据而已，而且最终达到的效果并不是特别理想。Embedding模型其实在某些场景下的相似性、相关联结果还是非常棒的。对于微调模型暂时只能学习一下，感觉上并不能进行应用使用，或者使用的方法可能还存在问题，这里的实践仅供学术的参考。</p><p>本文所有代码都在我的go代码仓库: <a href="https://github.com/aehyok/go-api/myai" target="_blank" rel="noreferrer">https://github.com/aehyok/go-api</a></p><blockquote><p>我的个人博客：<a href="http://vue.tuokecat.com/blog" target="_blank" rel="noreferrer">http://vue.tuokecat.com/blog</a></p></blockquote><blockquote><p>我的个人github：<a href="https://github.com/aehyok" target="_blank" rel="noreferrer">https://github.com/aehyok</a></p></blockquote><blockquote><p>我的前端项目：pnpm + monorepo + qiankun + vue3 + vite3 + 工具库、组件库 + 工程化 + 自动化<br> 不断完善中,整体框架都有了 <br> 在线预览：<a href="http://vue.tuokecat.com" target="_blank" rel="noreferrer">http://vue.tuokecat.com</a> <br> github源码：<a href="https://github.com/aehyok/vue-qiankun" target="_blank" rel="noreferrer">https://github.com/aehyok/vue-qiankun</a></p></blockquote><p><em><strong>本文正在参加<a href="https://juejin.cn/post/7207698564641996856/" title="https://juejin.cn/post/7207698564641996856/" target="_blank" rel="noreferrer">「金石计划」</a></strong></em></p>`,37)]))}const b=e(s,[["render",o]]);export{d as __pageData,b as default};
