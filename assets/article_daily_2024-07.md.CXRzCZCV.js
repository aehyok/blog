import{_ as s,c as e,o as n,ag as l}from"./chunks/framework.ELrfyV9R.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily/2024-07.md","filePath":"article/daily/2024-07.md","lastUpdated":1760451747000}'),t={name:"article/daily/2024-07.md"};function i(p,a,o,r,c,d){return n(),e("div",null,a[0]||(a[0]=[l('<h2 id="_7月29日" tabindex="-1">7月29日 <a class="header-anchor" href="#_7月29日" aria-label="Permalink to &quot;7月29日&quot;">​</a></h2><ul><li>通过Mysql 存储过程批量插入测试数据</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE DEFINER=`root`@`localhost` PROCEDURE `batch_insert_test`()</span></span>\n<span class="line"><span>BEGIN</span></span>\n<span class="line"><span>  #Routine body goes here...</span></span>\n<span class="line"><span>  DECLARE i INT DEFAULT 101;</span></span>\n<span class="line"><span>    DECLARE max_count INT DEFAULT 50000; -- 设定要插入的行数</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    WHILE i &lt;= max_count DO</span></span>\n<span class="line"><span>        INSERT INTO `dvsdb30`.`pcs2403_householdcode` (`id`, `areaid`, `hbh`, `pid`, `nf`, `hzxm`, `hzxb`, `hzzjlx`, `zjhm`, `hzidCard`, `hzmz`, `hzzzmm`, `hlx`, `jcdxlx`, `jtrks`, `lxdh`, `createby`, `createtime`, `updateby`, `updatetime`, `zrcmc`, `ndrks`, `sfcyh`) VALUES (CONCAT(&#39;a1e934c1-b82b-40db-a716-b106a2eb5bcd-&#39;, i), &#39;1641459739483312128&#39;, NULL, NULL, 202403, &#39;百瑞&#39;, &#39;1&#39;, &#39;01&#39;, &#39;&#39;, &#39;&#39;, &#39;100A09001&#39;, NULL, &#39;100B02001&#39;, NULL, 3, NULL, &#39;1749713533467234304&#39;, &#39;2024-03-29 19:26:46&#39;, &#39;1749713533467234304&#39;, &#39;2024-04-07 11:03:50&#39;, NULL, NULL, &#39;1&#39;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        SET i = i + 1;</span></span>\n<span class="line"><span>    END WHILE;</span></span>\n<span class="line"><span>END</span></span></code></pre></div><h2 id="_7月30日" tabindex="-1">7月30日 <a class="header-anchor" href="#_7月30日" aria-label="Permalink to &quot;7月30日&quot;">​</a></h2><ul><li>通过C#编写WebAssembly来实现前端导出 但是数据量过大会有out of memory的问题</li></ul><h2 id="_7月31日" tabindex="-1">7月31日 <a class="header-anchor" href="#_7月31日" aria-label="Permalink to &quot;7月31日&quot;">​</a></h2><ul><li>ExcelDataReader C# 读取Excel文件 大文件的excel节省服务器的内存使用</li></ul><h2 id="docker-历史版本" tabindex="-1">docker 历史版本 <a class="header-anchor" href="#docker-历史版本" aria-label="Permalink to &quot;docker 历史版本&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/desktop/release-notes/" target="_blank" rel="noreferrer">https://docs.docker.com/desktop/release-notes/</a></li></ul>',9)]))}const u=s(t,[["render",i]]);export{_ as __pageData,u as default};
