import{_ as s,c as n,o as e,ag as l}from"./chunks/framework.Crtr1jMB.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/2023-01-11-go.md","filePath":"javascript/2023-01-11-go.md","lastUpdated":1748489770000}'),p={name:"javascript/2023-01-11-go.md"};function i(o,a,t,r,c,d){return e(),n("div",null,a[0]||(a[0]=[l(`<h2 id="安装go" tabindex="-1">安装go <a class="header-anchor" href="#安装go" aria-label="Permalink to &quot;安装go&quot;">​</a></h2><ul><li><a href="https://time.geekbang.org/column/article/427489" target="_blank" rel="noreferrer">https://time.geekbang.org/column/article/427489</a></li></ul><h2 id="准备go环境" tabindex="-1">准备go环境 <a class="header-anchor" href="#准备go环境" aria-label="Permalink to &quot;准备go环境&quot;">​</a></h2><ul><li>下载链接：<a href="https://go.dev/dl/" target="_blank" rel="noreferrer">https://go.dev/dl/</a></li></ul><p>在这里可以下载到window版本、mac版本以及linux下版本。下载完毕后，分别安装即可。window和mac的安装都没什么过多的废话可以说的。这里着重简单说一下linux版本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 下载到linux文件，或者拷贝到linux对应文件夹后</span></span>
<span class="line"><span>// 比如拷贝到了当前目录</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 将文件解压到/usr/local</span></span>
<span class="line"><span>tar -C /usr/local -xzf go1.19.5.linux-amd64.tar.gz</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 修改环境变量</span></span>
<span class="line"><span>export PATH=$PATH:/usr/local/go/bin</span></span></code></pre></div><h2 id="查看版本" tabindex="-1">查看版本 <a class="header-anchor" href="#查看版本" aria-label="Permalink to &quot;查看版本&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 安装完毕之后，便可以在命令行中查看版本</span></span>
<span class="line"><span>go version   // go version go1.19.5 linux/amd64</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 顺便可以查看go语言中的环境变量</span></span>
<span class="line"><span>go env</span></span></code></pre></div><h2 id="准备开发环境" tabindex="-1">准备开发环境 <a class="header-anchor" href="#准备开发环境" aria-label="Permalink to &quot;准备开发环境&quot;">​</a></h2><p>我这里使用的开发工具是Visual Studio Code，下载地址为 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noreferrer">https://code.visualstudio.com/Download</a></p><p>VS Code中安装插件 Go，这里就包含了很多的功能：</p><ul><li>智能感知</li><li>代码导航</li><li>代码编辑</li><li>代码诊断</li><li>测试和调试</li><li>等等其他功能</li><li>当然你也可以下载其他插件进行安装和使用</li></ul><h2 id="hello-world" tabindex="-1">hello world <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;hello world&quot;">​</a></h2><p>找到一个位置，进行查看创建文件夹，然后用VSCode打开文件夹，并在文件夹中新建main.go的文件 在main.go中的代码如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &quot;fmt&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func main() {</span></span>
<span class="line"><span>	fmt.Println(&quot;hello, world&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>有了代码，直接命令行中，cd到main.go相同的目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 以调试的模式运行</span></span>
<span class="line"><span>go run main.go  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 或者在其他目录通过相对路径的方式进行运行</span></span>
<span class="line"><span>go run /xx/xx/main.go</span></span></code></pre></div><p>则可以看到控制台下输出了hello world,则表明我们的开发环境搭建成功了。</p><p>如果go build发生错误</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>go: go.mod file not found in current directory or any parent directory; see &#39;go help modules&#39;</span></span></code></pre></div><p>则需要我们进行初始化项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// godemo则为module  name</span></span>
<span class="line"><span>go mod init godemo</span></span></code></pre></div><p>执行完毕后，则可以看到项目目录下多了一个go.mod文件</p><p>如果有其它的项目依赖，则需要执行安装依赖的命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 安装项目的依赖</span></span>
<span class="line"><span>go mod tidy</span></span></code></pre></div><p>OK之后，再重新运行go build，则项目下则会生成一个godemo.exe文件，直接运行后同样可以看到hello world的控制台输出。</p><h2 id="linux-下载" tabindex="-1">linux 下载 <a class="header-anchor" href="#linux-下载" aria-label="Permalink to &quot;linux 下载&quot;">​</a></h2><ul><li><a href="https://go.dev/dl/" target="_blank" rel="noreferrer">https://go.dev/dl/</a></li><li><a href="https://juejin.cn/post/6844903756773998600" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903756773998600</a></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>前端从零入坑go后端开发(一)：搭环境、打印hello world、尝试最简api服务、部署linux、最后做个小规划</p><p>年后跟公司另外一个前端，开始从零学习go，有时间就学习一点，把点滴记录总结下来，方便后续的查看和学习。如果有前端有兴趣的也可以一起加入学习。</p><p>通过简单的搭建环境，输出hello world，再到最简单的承载web服务，部署到linux服务器。初步来其实跟nodejs非常相似，只是依赖发生了变化而已，这个入门相对来说还是非常简单的，不会劝退太多的人。接下来有时间我会继续学习搭建后端服务接口的一个小框架。</p><ul><li>gin轻量级的web框架</li><li>gorm性能极高的orm操作数据库 Mysql 的框架</li><li>go-redis go中操作redis</li><li>amqp091-go go中操作rabbitmq</li><li>consul 服务发现和服务治理</li><li>go-micro 构建微服务的基础框架</li><li>golang-jwt 登录token认证</li><li>授权体系</li><li>等等，暂时想到这么多，会根据业务的调整慢慢的来优化这一条线路</li></ul><h2 id="gin-post提交" tabindex="-1">gin post提交 <a class="header-anchor" href="#gin-post提交" aria-label="Permalink to &quot;gin  post提交&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @Param account formData string true &quot;账号&quot;</span></span>
<span class="line"><span>// @Param password formData string true &quot;密码&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	account := ctx.PostForm(&quot;account&quot;)</span></span>
<span class="line"><span>  password := ctx.PostForm(&quot;account&quot;)</span></span></code></pre></div><h2 id="gin-post提交-1" tabindex="-1">gin post提交 <a class="header-anchor" href="#gin-post提交-1" aria-label="Permalink to &quot;gin post提交&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span> &quot;account&quot;: &quot;11&quot;,</span></span>
<span class="line"><span>&quot;password&quot;: &quot;22&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// @Param loginModel body LoginModel true &quot;User information&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	var loginModel LoginModel</span></span>
<span class="line"><span>	if err := ctx.ShouldBindJSON(&amp;loginModel); err != nil {</span></span>
<span class="line"><span>		return dto.SetResponseFailure(&quot;err--err--err--err&quot;)</span></span>
<span class="line"><span>	}</span></span></code></pre></div>`,37)]))}const g=s(p,[["render",i]]);export{h as __pageData,g as default};
