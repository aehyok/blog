import{_ as e,c as t,o as r,ag as l}from"./chunks/framework.DyQ3i0fn.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/code/2023-02-08-面试整理.md","filePath":"article/code/2023-02-08-面试整理.md","lastUpdated":1749802044000}'),n={name:"article/code/2023-02-08-面试整理.md"};function o(i,a,s,h,c,p){return r(),t("div",null,a[0]||(a[0]=[l('<h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><h4 id="localstorage" tabindex="-1">localstorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;localstorage&quot;">​</a></h4><ul><li><a href="https://juejin.cn/post/7163075131261059086" target="_blank" rel="noreferrer">https://juejin.cn/post/7163075131261059086</a></li></ul><h4 id="首页加载速度" tabindex="-1">首页加载速度 <a class="header-anchor" href="#首页加载速度" aria-label="Permalink to &quot;首页加载速度&quot;">​</a></h4><ul><li><a href="https://juejin.cn/post/7188894691356573754" target="_blank" rel="noreferrer">https://juejin.cn/post/7188894691356573754</a></li></ul><h4 id="防抖和节流" tabindex="-1">防抖和节流 <a class="header-anchor" href="#防抖和节流" aria-label="Permalink to &quot;防抖和节流&quot;">​</a></h4><ul><li><a href="https://juejin.cn/post/6901493600098779150" target="_blank" rel="noreferrer">https://juejin.cn/post/6901493600098779150</a></li><li><a href="https://coding.imooc.com/learn/questiondetail/194653.html" target="_blank" rel="noreferrer">https://coding.imooc.com/learn/questiondetail/194653.html</a></li></ul><h2 id="基础整理" tabindex="-1">基础整理 <a class="header-anchor" href="#基础整理" aria-label="Permalink to &quot;基础整理&quot;">​</a></h2><h4 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h4><p>首先从宏观的角度来说: JavaScript代码要想能够被执行，就必须先被V8引擎编译，编译完成之后才会进入到执行阶段，总结为六个字：先编译再执行。</p><h4 id="调用栈" tabindex="-1">调用栈 <a class="header-anchor" href="#调用栈" aria-label="Permalink to &quot;调用栈&quot;">​</a></h4><p>console.trace() 可以打印栈中的信息</p><p>调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，这个时候JavaScript引擎其实是会为当前函数创建函数执行上下文，它就将该函数执行上下文放到栈顶，当从这个函数返回的时候，就会将这个函数执行上下文从栈顶弹出，这就是调用栈做的事情。也就是说执行上下文是通过调用栈来管理的。</p><h4 id="var-const-let" tabindex="-1">var const let <a class="header-anchor" href="#var-const-let" aria-label="Permalink to &quot;var const let&quot;">​</a></h4><p>var定义的变量存在变量提升，块级作用域对var无效。 let不会有变量提升，有块级作用域、函数作用域和全局作用域。</p><ul><li>暂时性死区 <a href="https://juejin.cn/post/6968399560162951204" target="_blank" rel="noreferrer">https://juejin.cn/post/6968399560162951204</a></li></ul><h4 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h4><p>函数创建完，闭包就形成了，并且不能自动释放，可选择手动设置null进行释放闭包。</p><p>我将永远记住闭包的方法是通过背包的类比。当一个函数被创建并传递或从另一个函数返回时，它会携带一个背包。背包中是函数声明时作用域内的所有变量。</p><ul><li><a href="https://juejin.cn/post/6844903858636849159" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903858636849159</a></li><li><a href="https://juejin.cn/post/7120371754274553887" target="_blank" rel="noreferrer">https://juejin.cn/post/7120371754274553887</a></li><li><a href="https://juejin.cn/post/6937469222251560990" target="_blank" rel="noreferrer">https://juejin.cn/post/6937469222251560990</a></li><li><a href="https://juejin.cn/post/7196636673694285882" target="_blank" rel="noreferrer">https://juejin.cn/post/7196636673694285882</a></li><li><a href="https://juejin.cn/post/7120371754274553887" target="_blank" rel="noreferrer">https://juejin.cn/post/7120371754274553887</a></li></ul><h4 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-label="Permalink to &quot;原型和原型链&quot;">​</a></h4><ul><li><a href="https://juejin.cn/post/7126061672032108551" target="_blank" rel="noreferrer">https://juejin.cn/post/7126061672032108551</a></li></ul><h4 id="深拷贝和浅拷贝" tabindex="-1">深拷贝和浅拷贝 <a class="header-anchor" href="#深拷贝和浅拷贝" aria-label="Permalink to &quot;深拷贝和浅拷贝&quot;">​</a></h4><ul><li>weakmap <ul><li><a href="https://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/#docs/set-map#WeakMap</a></li><li>weakmap 的key为对象</li><li>weakmap 键名所引用的对象都是弱引用。 WeakMap 弱引用的只是键名，而不是键值。</li></ul></li></ul><h4 id="es6-class" tabindex="-1">ES6 Class <a class="header-anchor" href="#es6-class" aria-label="Permalink to &quot;ES6 Class&quot;">​</a></h4><ul><li><a href="https://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/#docs/class</a></li></ul>',26)]))}const f=e(n,[["render",o]]);export{d as __pageData,f as default};
